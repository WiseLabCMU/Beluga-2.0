menuconfig MCUMGR_TRANSPORT_COMMS
	bool "Comms mcumgr SMP transport"
	depends on BASE64
	depends on CRC
	help
	  Enables handling of SMP commands received over uart.  This allows
	  for user data to be received while mcumgr commands are enabled.

if MCUMGR_TRANSPORT_COMMS

config MCUMGR_TRANSPORT_COMMS_MTU
	int "Shell comms MTU"
	default 256
	help
	  Maximum size of SMP frames sent and received over shell.  This value
	  must satisfy the following relation:
	  MCUMGR_TRANSPORT_SHELL_MTU <= MCUMGR_TRANSPORT_NETBUF_SIZE + 2

config MCUMGR_TRANSPORT_COMMS_RX_BUF_COUNT
	int "Shell SMP RX buffer count"
	default 2
	help
	  Number of buffers used for receiving SMP fragments over shell.

config MCUMGR_TRANSPORT_COMMS_INPUT_TIMEOUT
	bool "Shell input expiration"
	help
	  If enabled, will time out a partial or erroneous MCUmgr command
	  received via the shell transport after a given time. This prevents
	  the shell from becoming locked if it never receives the full packet
	  that a header indicated it would receive.

config MCUMGR_TRANSPORT_COMMS_INPUT_TIMEOUT_TIME
	int "Shell input expiration timeout"
	depends on MCUMGR_TRANSPORT_SHELL_INPUT_TIMEOUT
	default 3000
	help
	  Time (in msec) after receiving a valid MCUmgr header on the serial
	  transport before considering it as timed out and returning the shell
	  to normal operation.

endif # MCUMGR_TRANSPORT_COMMS

menuconfig COMMS_BACKENDS
    bool "Comms backends"
    default y
    help
        Enable comms backends.

if COMMS_BACKENDS

config COMMS_BACKEND_SERIAL
    bool "Serial backend"
    default y
    select SERIAL
    select RING_BUFFER
    help
        Enable serial backend

if COMMS_BACKEND_SERIAL

config COMMS_BACKEND_SERIAL_INIT_PRIORITY
    int "Initialization priority"
    default 90
    range 0 99
    help
        Initialization priority for UART backend. This must be bigger than
    	the initialization priority of the used serial device.

config COMMS_BACKEND_SERIAL_INTERRUPT_DRIVEN
	bool "Interrupt driven"
	default y
	depends on SERIAL_SUPPORT_INTERRUPT

config COMMS_ASYNC_API
	bool "Asynchronous comms API"
	default n
	depends on UART_ASYNC_API
	help
	  This option enables asynchronous comms API.

choice COMMS_BACKEND_SERIAL_API
	prompt "Mode"
	default COMMS_BACKEND_SERIAL_API_ASYNC if COMMS_ASYNC_API
	default COMMS_BACKEND_SERIAL_API_INTERRUPT_DRIVEN if COMMS_BACKEND_SERIAL_INTERRUPT_DRIVEN
	default COMMS_BACKEND_SERIAL_API_POLLING

config COMMS_BACKEND_SERIAL_API_POLLING
	prompt "Polling"

config COMMS_BACKEND_SERIAL_API_INTERRUPT_DRIVEN
	bool "Interrupt driven"
	depends on SERIAL_SUPPORT_INTERRUPT
	select UART_INTERRUPT_DRIVEN


config COMMS_BACKEND_SERIAL_API_ASYNC
	bool "Asynchronous"
	depends on SERIAL_SUPPORT_ASYNC
	select UART_ASYNC_RX_HELPER

endchoice

config COMMS_BACKEND_SERIAL_FORCE_TX_BLOCKING_MODE
	bool "Force blocking mode for TX"
	help
	  Force blocking mode for TX.

config COMMS_BACKEND_SERIAL_TX_RING_BUFFER_SIZE
	int "Set TX ring buffer size"
	default 8
	depends on COMMS_BACKEND_SERIAL_API_INTERRUPT_DRIVEN
	help
	  If UART is utilizing DMA transfers then increasing ring buffer size
	  increases transfers length and reduces number of interrupts.

config COMMS_BACKEND_SERIAL_RX_RING_BUFFER_SIZE
	int "Set RX ring buffer size"
	depends on COMMS_BACKEND_SERIAL_API_INTERRUPT_DRIVEN || COMMS_BACKEND_SERIAL_API_POLLING
	default 256 if MCUMGR_TRANSPORT_COMMS
	default 64
	help
	  RX ring buffer size impacts accepted latency of handling incoming
	  bytes by shell. If shell input is coming from the keyboard then it is
	  usually enough if ring buffer is few bytes (more than one due to
	  escape sequences). However, if bulk data is transferred it may be
	  required to increase it.

if COMMS_BACKEND_SERIAL_API_ASYNC

config COMMS_BACKEND_SERIAL_ASYNC_RX_TIMEOUT
	int "RX inactivity timeout (in microseconds)"
	default 10000
	help
	  Inactivity timeout after which received data is reported.

config COMMS_BACKEND_SERIAL_ASYNC_RX_BUFFER_COUNT
	int "Number of RX buffers"
	default 4
	range 2 64
	help
	  Number of RX buffers. Some UART driver implementations changes buffers
	  on timeout so this number should be big enough to cover handling on
	  time incoming data. 4 should be enough for almost all the cases unless
	  CPU load is high and there is very high shell thread latency.

config COMMS_BACKEND_SERIAL_ASYNC_RX_BUFFER_SIZE
	int "Size of the RX buffer"
	default 16
	help
	  Size of a single RX buffer. Together with buffer count it defines the
	  space that can hold RX data. It may be decreased if shell input is
	  slow and may need to be increased if long messages are pasted directly
	  to the shell prompt.

endif # COMMS_BACKEND_SERIAL_API_ASYNC

config COMMS_BACKEND_SERIAL_RX_POLL_PERIOD
	int "RX polling period (in milliseconds)"
	default 10
	depends on COMMS_BACKEND_SERIAL_API_POLLING
	help
	  Determines how often UART is polled for RX byte.

config COMMS_BACKEND_SERIAL_CHECK_DTR
	bool "Check DTR signal before TX"
	depends on COMMS_BACKEND_SERIAL_API_INTERRUPT_DRIVEN
	depends on UART_LINE_CTRL
	help
	  Check DTR signal before TX.

endif # COMMS_BACKEND_SERIAL

endif # COMMS_BACKENDS

config COMMS_MAX_TOKENS
    int "Maximum argument tokens"
    default 20

config COMMS_RTX_BUF_SIZE
    int "Transmit and Receive Buffer Sizes"
    default 256
